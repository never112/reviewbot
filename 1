pick e11a66a fix: check resustl file path use relative path
pick c281c27 refactor: make command as slice to extend its usage
pick 22e6616 refactor: notify message with more information (#206)
pick 6e356a9 fix: disable gofmt in golangci_lint (#210)
pick 3260b5f doc: design new execution logic for golangci-lint
pick ac2a1d6 doc: mirror enhance
pick 6f0b729 golangci-lint(refactor): support more scenario
pick 3b7fe99 handler: support artifact env
pick e21d8c6 chore: add yarn to docker in order to support web project (#216)
pick d310b08 chore: disable wsl
pick 4658eea chore: config qbox/kodo repo
pick afe92ab feat: support golangci-lint custom config
pick 842f67f doc: mirror enhance
pick d49e3e5 chore: no need to custom config these repos now
pick cfe34a4 add dora repo conf (#221)
pick 687064f chore: use workDir for dora-cloud repo
pick b796330 chore: add user-center & sofa config (#227)
pick df91e8e fix: correcting misspelling (#228)
pick de43219 fix(note-check): skip deleted file
pick 4f848e8 chore: fix config
pick 1dd874b chore: add debug module
pick d780529 fix: fix conflic
pick f4bdbb7 chore: ignore linters which seems too arbitrary
pick 60db654 improvement: (version2)automatically find the golangci-lint execution directory (#235)
pick 77795a7 deploy: use custom golangci-lint config for goplus org
pick 9544b8b chore: add more log for debug
pick 3dbe61c feat: support clone to sub dir
pick e346529 chore: no need to custom config these repos now
pick b3122f0 build: release container image with github action (#246)
pick 181a4cd build: publishing binary and container with goreleaser (#247)
pick 40d0e9c refactor: output parser v2
pick 101d428 fix error
pick 325e4b8 chore: add more notes
pick 8b90cad fix(parsev2): file check
pick 7cd2311 enhance: improve golangci-lint default execution path (#248)
pick 03ef8df add java env

# Rebase 241e015..03ef8df onto 241e015 (40 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
